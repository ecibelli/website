c("Normal" = "norm",
"Uniform" = "unif",
"Log-normal" = "lnorm",
"Exponential" = "exp")),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
hist(dist(500))
})
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("rb", "Choose one:",
choiceNames = list(
icon("calendar"),
HTML("<p style='color:red;'>Red Text</p>"),
"Normal text"
),
choiceValues = list(
"icon", "html", "text"
)),
textOutput("txt")
)
server <- function(input, output) {
output$txt <- renderText({
paste("You chose", input$rb)
})
}
shinyApp(ui, server)
}
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
radioButtons("dist", "Distribution type:",
c("Normal" = "norm",
"Uniform" = "unif",
"Log-normal" = "lnorm",
"Exponential" = "exp")),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
hist(dist(500))
})
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("rb", "Choose one:",
choiceNames = list(
icon("calendar"),
HTML("<p style='color:red;'>Red Text</p>"),
"Normal text"
),
choiceValues = list(
"icon", "html", "text"
)),
textOutput("txt")
)
server <- function(input, output) {
output$txt <- renderText({
paste("You chose", input$rb)
})
}
shinyApp(ui, server)
}
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h1("Pretty radio buttons"),
br(),
fluidRow(
column(
width = 4,
prettyRadioButtons(inputId = "radio1",
label = "Click me!",
choices = c("Click me !", "Me !", "Or me !")),
verbatimTextOutput(outputId = "res1"),
br(),
prettyRadioButtons(inputId = "radio4",  label = "Click me!",
choices = c("Click me !", "Me !", "Or me !"),
outline = TRUE,
plain = TRUE, icon = icon("thumbs-up")),
verbatimTextOutput(outputId = "res4")
),
column(
width = 4,
prettyRadioButtons(inputId = "radio2",
label = "Click me!", thick = TRUE,
choices = c("Click me !", "Me !", "Or me !"),
animation = "pulse", status = "info"),
verbatimTextOutput(outputId = "res2"),
br(),
prettyRadioButtons(inputId = "radio5",
label = "Click me!", icon = icon("check"),
choices = c("Click me !", "Me !", "Or me !"),
animation = "tada", status = "default"),
verbatimTextOutput(outputId = "res5")
),
column(
width = 4,
prettyRadioButtons(inputId = "radio3",  label = "Click me!",
choices = c("Click me !", "Me !", "Or me !"),
shape = "round", status = "danger",
fill = TRUE, inline = TRUE),
verbatimTextOutput(outputId = "res3")
)
)
)
server <- function(input, output, session) {
output$res1 <- renderPrint(input$radio1)
output$res2 <- renderPrint(input$radio2)
output$res3 <- renderPrint(input$radio3)
output$res4 <- renderPrint(input$radio4)
output$res5 <- renderPrint(input$radio5)
}
shinyApp(ui, server)
}
comm_names
if (interactive()) {
ui <- fluidPage(
radioButtons("dist", "Distribution type:",
c("Normal" = "norm",
"Uniform" = "unif",
"Log-normal" = "lnorm",
"Exponential" = "exp")),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
hist(dist(500))
})
}
if (interactive()) {
ui <- fluidPage(
radioButtons("dist", "Distribution type:",
c("Normal" = "norm",
"Uniform" = "unif",
"Log-normal" = "lnorm",
"Exponential" = "exp")),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
hist(dist(500))
})
}
}
if (interactive()) {
ui <- fluidPage(
radioButtons("dist", "Distribution type:",
c("Normal" = "norm",
"Uniform" = "unif",
"Log-normal" = "lnorm",
"Exponential" = "exp")),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
hist(dist(500))
})
}
}
shinyApp(ui, server)
paste0('"', paste(comm_list, collapse='", "'), '"')
list(unique(orgs$Community))
netOrder
netOrder = c("AUSL", "Charter", "Contract", "ISP", "Options",
paste("Network", 1:17, sep = " "), "CLOSED")
netOrder
class(netOrder)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(openxlsx)
#library(xlsx)
library(ggplot2)
library(gridExtra)
library(knitr)
library(kableExtra)
library(maptools)
library(rgdal)
wd = "I:/Data & Impact/Analyses/FunderRequests/20181204_FryArtsLearningMemo"
setwd(wd)
# ..............................
## Pull data
# Source source: I:/Data & Impact/Analyses/State of the Arts in Chicago Public Schools/script
# Schools pull modified slightly based on most recent 17-18 staffing and school exclusion numbers
source("scripts/sota_schools_pull.R")
source("scripts/sota_partnerships.R")
# rubric data objects*:  r, rAll
# partner data objects:
# partner.disinctparts (matches partners with schools for each year, use for school-partner mapping)
# partner.programs (matches partners and programs with schools, use for program-level info. dupes partner count per year, because a partner may have multiple programs at a school)
#* Note on school inclusion:
# For the CSC section of this script, schools are excluded as done in the SOTA report (no ALOPs and combos after 15-16). Those exclusions are done in this script as well to make the numbers consistent with the SOTA, as Fry explicitly uses "SOTA" here. For the other sections on their partner interactions and programming (as well as for the FTE count barchart in the CSC section, which always includes all schools) all schools are counted.
# the "r" object includes just the SOTA counted schools
# the "rAll" object includes all schools
# read in list of grantee orgs
grantees = read.csv(sprintf("%s/data/fryGrantees.csv", wd), head = T)
# ..................................
## Create nice mapping of CSC score to label
# Define labels for CSC levels
cscColLabels <- c("Excelling", "Strong", "Developing",
"Emerging", "Insufficient Data")
# Pull score into new column
r$CSC = as.character(r$FinalScore)
# Map to new labels
r$CSC = as.factor(as.character(
plyr::mapvalues(r$CSC, from = c("1", "2", "3", "4", "5"), to = cscColLabels)))
# Order form Excelling - insufficient
r$CSC = factor(r$CSC,levels = cscColLabels)
# define CSC plotting colors
darkblue1    <- rgb(27,117,188,max=255)
lightblue2   <- rgb(138,194,233,max=255)
green3       <- rgb(173,211,99,max=255)
yellow4      <- rgb(255,194,14,max=255)
red5         <- rgb(218,33,40,max=255)
cscColors    <- c(darkblue1,lightblue2,green3,yellow4,red5)
# Define program type colors
greenCol = "#00A18E"
goldCol = "#FFC20E"
navyCol = "#003e7e"
aquaCol = "#008DA7"
greyCol = "#C3C3C3"
lavCol = "#7183B2"
seaCol = "#78C6BE"
progCols = c(greenCol, goldCol, navyCol, aquaCol, greyCol, lavCol, seaCol)
# plot font size standards
bigLabSize = 16
medLabSize = 12
smallLabSize = 8
# Define year vector for longitudinal plots
yrs = c("2012-13", "2013-14", "2014-15", "2015-16", "2016-17", "2017-18")
# Colors for full longitudinal set
yrsCols = c(rep(greenCol, 5), goldCol)
# Define bare-ish theme for bar plots
sota_theme_bar = theme_classic(base_size = bigLabSize) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks = element_blank(),
axis.line.y = element_blank(),
legend.position = "none")
# Bar when you want a legend
sota_theme_bar_leg = theme_classic(base_size = bigLabSize) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks = element_blank(),
axis.line.y = element_blank())
#legend.position = "none")
# Horizontal bare bar
sota_theme_bar_hor = theme_classic(base_size = bigLabSize) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks = element_blank(),
axis.line.x = element_blank(),
legend.position = "none")
# define really bare theme for pie plots
sota_theme_pie = theme_classic(base_size = bigLabSize+6) +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
axis.line = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0.5))
# modified pie when you want a legend
sota_theme_pie_leg = theme_classic(base_size = bigLabSize+6) +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
axis.line = element_blank(),
#legend.position = "none",
plot.title = element_text(hjust = 0.5))
# Default map theme
fryMapTheme = theme(axis.text= element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank(),
#legend.title=element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust=.5),
plot.subtitle = element_text(hjust=.5),
panel.grid.major = element_blank(),
legend.background = element_rect(size=0.5, linetype="solid",
colour ="black"))
## Prop table of CSC scores by year
cscPropTable = round(100 * (prop.table(xtabs(~SchoolYears + CSC, data = r),1)), 0)
cscPropTable = data.frame(cscPropTable)
# Label with percent
cscPropTable$Label = paste(cscPropTable$Freq, "%", sep = "")
# Restrict to excelling and strong
cscExcelStrong = cscPropTable[cscPropTable$CSC %in% c("Excelling", "Strong"),]
ggplot(cscExcelStrong, aes(x = SchoolYears, y = Freq, fill = CSC, label = Label)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = cscColors[1:2], name = "Creative Schools\nCertification") +
geom_text(size = smallLabSize, color = "white", position = position_stack(vjust = 0.5)) +
sota_theme_bar_leg +
xlab("")
## All 17-18 numbers
# Note that schools who did not report (CSC = 5) are always excluded from these numbers)
# Subset to 1718 data
r78 = r[r$SchoolYears == "2017-18",]
# Number of elementary schools with 120 minutes of instruction (CSC minutes = 1)
minPerc = round(100 * (
nrow(r78[r78$Minutes == 1 & r78$SchoolType == "ES" &
r78$FinalScore != 5,]) / # ES with CSC score of 1 on minutes
nrow(r78[r78$SchoolType == "ES" & r78$FinalScore != 5,])),       # All reporting ES
0)
minPercForm = paste(minPerc, "%", sep = "")
# .....
# Number of elementary schools with 100% grades access (CSC minutes = 1)
accPerc = round(100 * (
nrow(r78[r78$Access == 1 & r78$SchoolType == "ES" &
r78$FinalScore != 5,]) / # ES with CSC score of 1 on access
nrow(r78[r78$SchoolType == "ES" & r78$FinalScore != 5,])),   # All reporting ES
0)
accPercForm = paste(accPerc, "%", sep = "")
# .....
# Number of high schools with 3+ disciplines/depths (CSC minutes = 1 or 2)
ddPerc = round(100 * (
nrow(r78[r78$Disciplines %in% c(1,2) & r78$SchoolType == "HS" &
r78$FinalScore != 5,]) / # HS with CSC score of 1 or 2 on DD
nrow(r78[r78$FinalScore != 5 & r78$SchoolType == "HS",])),     # All reporting HS
0)
ddPercForm = paste(ddPerc, "%", sep = "")
# Count total partners for 17-18
partCount = length(unique(partner.active[partner.active$SchoolYears == "2017-18",]$Name))
# Make sure all of the Fry partners are in that list
#grantees$artlookName %in% unique(partner.active[partner.active$SchoolYears == "2017-18",]$Name)
# How many Fry grantees are there?
numPartFry = nrow(grantees)
# What percent of total partners are Fry grantees?
partFryPerc = round(100*(nrow(grantees)/partCount), 1)
# 17-18 programs
program78 = partner.programs[partner.programs$SchoolYears == "2017-18",]
# 17-18 residencies
res78 = program78[program78$ContentType == "RESI",]
# Make sure no school/org duplicates
res78$dupeCheck = paste(res78$OrgId, res78$SchoolId, sep = "-")
res78$dupe = duplicated(res78$dupeCheck)
#table(res78$dupe)
# Number of orgs offering residencies / total partners
partOfferResPerc = round(100*(length(unique(res78$OrgId)) / partCount), 1)
# Number and percent of Fry partners offering residencies
fryOfferRes = length(which(grantees$artlookName %in% res78$OrgName))
fryOfferResPerc = round(100 * (fryOfferRes / nrow(grantees)), 1)
# Partners serving many schools
partSchool78 = partner.distinctparts[partner.distinctparts$SchoolYears == "2017-18",]
# Make sure no school/org duplicates
partSchool78$dupeCheck = paste(partSchool78$OrgId, partSchool78$SchoolId, sep = "-")
partSchool78$dupe = duplicated(partSchool78$dupeCheck)
# table(partSchool78$dupe)
# How many organizations serve 50+ schools?
orgSchoolTally = table(partSchool78$OrgName)
org50 = orgSchoolTally[orgSchoolTally > 50]
org50Count = length(org50)
org50Perc = round(100*(org50Count / partCount), 1)
# How many 50+ school orgs are Fry grantees?
fry50 = grantees[grantees$artlookName %in% names(org50),]$artlookName
fry50Count = length(fry50)
fry50Perc = round(100*(length(fry50) / nrow(grantees)), 1)
# How many of org50Count are fry50?
fry50PercOfPerc = round(100*(fry50Count / org50Count), 1)
# Create table to display all of this
tableStats = c(partCount,
numPartFry,
paste(partFryPerc, "%", sep = ""),
paste(partOfferResPerc, "%", sep = ""),
fryOfferRes,
paste(fryOfferResPerc, "%", sep = ""),
paste(org50Perc, "%", sep = ""),
paste(fry50PercOfPerc, "%", sep = ""))
tableStatNames = c("Total number of arts partners working in CPS",
"Total number of arts partners that are Fry Foundation grantees",
"Percent of arts partners that are Fry Foundation grantees",
"Percent of arts partners offering in-school residencies",
"Number of Fry grantees offering arts residencies",
"Percent of Fry grantees offering arts residencies",
"Percent of arts partners serving 50 or more schools",
"Percent of 50+ school group represented by Fry grantees")
fullTable = cbind(tableStats, tableStatNames)
colnames(fullTable) = c("Statistic", "Description")
#print(xtable(fullTable), type="latex", comment=FALSE)
kable(fullTable) %>%
kable_styling(bootstrap_options = "striped")
# Get list of schools served by Fry grantees in 17-18
# (Take list of school-partner pairings from partnership section)
frySchoolDF = partSchool78[partSchool78$OrgName %in% grantees$artlookName,]
# Make sure all orgs represented
#length(unique(frySchoolDF$OrgName)) == nrow(grantees)
# Pull names and use it to subset rubric
frySchoolId = unique(frySchoolDF$SchoolId)
fryRubric = rAll[rAll$SchoolYears == "2017-18" & rAll$SchoolId %in% frySchoolId,]
# Number of schools Fry grantees worked with
frySchoolCount = length(unique(fryRubric$SchoolId))
frySchoolPerc = round(100*(frySchoolCount / length(unique(r[r$SchoolYears == "2017-18",]$SchoolId))),1)
# Number of students
fryStudentCount = sum(fryRubric$TotalEnrollment)
# Number and perc of elementary schools
fryElemCount =  nrow(fryRubric[fryRubric$SchoolType == "ES",])
fryElemPerc = round(100 * (fryElemCount / nrow(r[r$SchoolYears == "2017-18" & r$SchoolType == "ES",])), 1)
# Number and perc of high schools
fryHighCount =  nrow(fryRubric[fryRubric$SchoolType == "HS",])
fryHighPerc = round(100 * (fryHighCount / nrow(r[r$SchoolYears == "2017-18" & r$SchoolType == "HS",])), 1)
# Number of options schools
fryOptCount = nrow(fryRubric[fryRubric$CpsNewNetwork == "Options",])
# Read in CPS demographics
demoCPS = read.xlsx(sprintf("%s/data/Demographics_LEPSPED_2018.xlsx", wd), sheet = 2)
demoCPS = demoCPS[,c(2:5, 7, 9)]
colnames(demoCPS) = c("SchoolId", "UnitName", "TotalStudents", "Bilingual", "SpED", "FreeReducedLunch")
# Restrict to schools in fryRubric
demoCPSFry = demoCPS[demoCPS$SchoolId %in% fryRubric$SchoolId,]
# Get total FRL
fryFRLCount = sum(as.numeric(as.character(demoCPSFry$FreeReducedLunch)))
fryFRLPerc = round(100*(fryFRLCount/fryStudentCount), 1)
# Get district total FRL
totalFRLPerc = round(100 * (as.numeric(as.character(demoCPS[2,6])) /
as.numeric(as.character(demoCPS[2, 3]))), 1)
# .........................................
# Create table with these statstics
portSchoolDesc = c("Number of all CPS schools served by Fry Foundation grantees",
"Percent of all CPS schools with Fry grantee partners",
"Total number of students in schools served by a Fry grantee partner",
"Number of elementary schools served by Fry Foundation grantees",
"Percent of elementary schools with Fry grantee partners",
"Number of high schools served by Fry Foundation grantees",
"Percent of high schools with Fry grantee partners",
"Number of options schools served by Fry Foundation grantees",
"Percent of students served from low-income households",
"Total CPS population eligible for free/reduced lunch")
portSchoolStats = c(frySchoolCount,
paste(frySchoolPerc, "%", sep = ""),
fryStudentCount,
fryElemCount,
paste(fryElemPerc, "%", sep = ""),
fryHighCount,
paste(fryHighPerc, "%", sep = ""),
fryOptCount,
paste(fryFRLPerc, "%", sep = ""),
paste(totalFRLPerc, "%", sep = ""))
portSchoolTable = data.frame(portSchoolStats, portSchoolDesc)
colnames(portSchoolTable) = c("Statistic", "Description")
kable(portSchoolTable) %>%
kable_styling(bootstrap_options = "striped")
# Get the list of schools that Fry grantees had residencies in during 17-18
fryResSchoolDF = res78[res78$OrgName %in% grantees$artlookName,]
fryResSchoolList = unique(fryResSchoolDF$SchoolId)
# Subset school rubric by that list, for 17-18
rFryRes = rAll[rAll$SchoolId %in% fryResSchoolList & rAll$SchoolYears == "2017-18",]
head(rFryRes)
class(rFryRes$SchoolId)
# Read in city shape data and Field area data
City<-readOGR("City", "shapes")
City2 <- spTransform(City, CRS("+proj=longlat +datum=WGS84"))
Field<-readOGR("Field", "shapes")
Field2 <- spTransform(Field, CRS("+proj=longlat +datum=WGS84"))
shapes<-c("City2","Field2")
# Create map object for plotting
City.df <- fortify(City)
Field.df = fortify(Field2)
# apply shape data for relevant schools
rFryRes.sp = rFryRes[,c("SchoolId", "Latitude", "Longitude")]
sp::coordinates(rFryRes.sp) <- ~Longitude+Latitude
sp::proj4string(rFryRes.sp) <- sp::proj4string(Field)
InField<-rFryRes.sp[Field,]
InField
mean(56, 74, 60, 72, 74, 65, 72, 75
)
shiny::runApp('I:/Data & Impact/Analyses/PPL_Connections/Attendee-Tracking')
packages()
update.packages()
update.packages()
install.packages("waffle")
install.packages("wesanderson")
library(wesanderson)
wesanderson
dir()
setwd("C:/Users/ecibelli/Desktop/personal/website")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
